name: Docker Build and Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write
  pull-requests: read

concurrency:
  group: docker-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-release:
    runs-on: [ docker ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute next version
        id: ver
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          latest_tag=$(gh release list --limit 1 --json tagName -q '.[0].tagName' 2>/dev/null || echo "")
          if [ -z "$latest_tag" ]; then
            latest_tag=$(git tag --sort=-version:refname | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1 || echo "0.0.0")
          fi
          version=${latest_tag#v}
          IFS='.' read -r major minor build <<< "$version"
          next_build=$((build + 1))
          NEXT_TAG="${major}.${minor}.${next_build}"
          echo "NEXT_TAG=${NEXT_TAG}" >> "$GITHUB_OUTPUT"
          
          # Create version.properties
          echo "version=${NEXT_TAG}" > version.properties
          echo "latest=latest" >> version.properties
          echo "created_at=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> version.properties

      - name: Build UAT Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/compile/Dockerfile
          push: true
          tags: |
            ghcr.io/fintronners/ftron:${{ steps.ver.outputs.NEXT_TAG }}-uat
            ghcr.io/fintronners/ftron:${{ steps.ver.outputs.NEXT_TAG }}-uat-latest
          platforms: linux/amd64
          provenance: false
          cache-from: type=gha,scope=ftron
          cache-to: type=gha,scope=ftron,mode=max

      - name: Build PROD Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/prod/compile/Dockerfile
          push: true
          tags: |
            ghcr.io/fintronners/ftron:${{ steps.ver.outputs.NEXT_TAG }}-prod
            ghcr.io/fintronners/ftron:${{ steps.ver.outputs.NEXT_TAG }}-prod-latest
          platforms: linux/amd64
          provenance: false
          cache-from: type=gha,scope=ftron
          cache-to: type=gha,scope=ftron,mode=max
          build-args: |
            DD_GIT_REPOSITORY_URL=https://github.com/${{ github.repository }}
            DD_GIT_COMMIT_SHA=${{ github.sha }}

      - name: Create Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ steps.ver.outputs.NEXT_TAG }}" \
            --title "Release ${{ steps.ver.outputs.NEXT_TAG }}" \
            --notes "Automated release for ${{ steps.ver.outputs.NEXT_TAG }}" \
            --target main \
            --latest

      - name: Slack Notification
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: "fintron-eng-back-end"
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: 'Docker Build and Release'
          SLACK_MESSAGE: |
            *Version:* ${{ steps.ver.outputs.NEXT_TAG }}
            *Status:* ${{ job.status }}
