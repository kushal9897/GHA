name: Docker Build and Release

on:
  push:
    branches:
      - main

permissions:
  contents: write       # For creating releases
  packages: write       # For pushing to GHCR
  pull-requests: read   # If needed for future

concurrency:
  group: docker-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-release:
    runs-on: [ docker ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute next version
        id: ver
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          latest_tag=$(gh release list --limit 1 --json tagName -q '.[0].tagName' 2>/dev/null || echo "")
          if [ -z "$latest_tag" ]; then
            latest_tag=$(git tag --sort=-version:refname | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1 || echo "0.0.0")
          fi
          version=${latest_tag#v}
          IFS='.' read -r major minor build <<< "$version"
          next_build=$((build + 1))
          NEXT_TAG="${major}.${minor}.${next_build}"
          echo "NEXT_TAG=${NEXT_TAG}" >> "$GITHUB_OUTPUT"
          
          # Create version.properties
          echo "version=${NEXT_TAG}" > version.properties
          echo "latest=latest" >> version.properties
          echo "created_at=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> version.properties

      - name: Build UAT Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/compile/Dockerfile
          push: false  # <-- set to true for production          
          tags: |
            ghcr.io/fintronners/ftron:${{ steps.ver.outputs.NEXT_TAG }}-uat
            ghcr.io/fintronners/ftron:${{ steps.ver.outputs.NEXT_TAG }}-uat-latest
          platforms: linux/amd64
          provenance: false
          cache-from: type=gha,scope=ftron
          cache-to: type=gha,scope=ftron,mode=max

      - name: Build PROD Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/prod/compile/Dockerfile
          push: false  # <-- set to true for production
          tags: |
            ghcr.io/fintronners/ftron:${{ steps.ver.outputs.NEXT_TAG }}-prod
            ghcr.io/fintronners/ftron:${{ steps.ver.outputs.NEXT_TAG }}-prod-latest
          platforms: linux/amd64
          provenance: false
          cache-from: type=gha,scope=ftron
          cache-to: type=gha,scope=ftron,mode=max
          build-args: |
            DD_GIT_REPOSITORY_URL=https://github.com/${{ github.repository }}
            DD_GIT_COMMIT_SHA=${{ github.sha }}

      # - name: Preview Release Notes (no release creation)
      #   run: |
      #     pr_number=$(git log -1 --pretty=%s | sed -n 's/.*#\([0-9]\+\).*/\1/p')
      #     if [ -z "$pr_number" ]; then
      #       echo "No PR number found in commit message."
      #       exit 0
      #     fi

      #     echo "Found PR: #$pr_number"

      #     pr_title=$(gh pr view $pr_number --json title -q .title)
      #     pr_body=$(gh pr view $pr_number --json body -q .body)
      #     pr_url=$(gh pr view $pr_number --json url -q .url)

      #     notes_file=$(mktemp)
      #     {
      #       echo "# $pr_title"
      #       echo
      #       echo "Linked PR: $pr_url"
      #       echo
      #       echo "$pr_body"
      #     } > "$notes_file"

      #     cat "$notes_file"

      #     echo "NOTES_FILE=$notes_file" >> $GITHUB_ENV
      #     echo "PR_TITLE=$pr_title" >> $GITHUB_ENV
      #     echo "PR_URL=$pr_url" >> $GITHUB_ENV

      # - name: create release 
      #   id: release
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     if gh release create "${{ env.NEXT_TAG }}" \
      #        --title "Release ${{ env.NEXT_TAG }}" \
      #        --notes-file "${{ env.NOTES_FILE }}" \
      #        --target main \
      #        --latest; then
      #       echo "release_created=true" >> $GITHUB_OUTPUT
      #     else
      #       echo "release_created=false" >> $GITHUB_OUTPUT
      #     fi

      # - name: Slack Notification
      #   if: always()
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      #     SLACK_CHANNEL: "fintron-eng-back-end"
      #     SLACK_ICON: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
      #     SLACK_COLOR: ${{ job.status }}  
      #     SLACK_TITLE: 'Docker Build and Release'
      #     SLACK_MESSAGE: |
      #       *Workflow:* ${{ github.workflow }}
      #       *Branch:* ${{ env.BRANCH_NAME }}
      #       *Version:* ${{ env.NEXT_TAG }}
      #       *Author:* ${{ github.actor }}
      #       *Status:* ${{ job.status }}
      #       *Release Created:* ${{ steps.release.outputs.release_created || 'false' }}
      #       *PR Link:* ${{ env.PR_URL }}
      #       *PR Title:* ${{ env.PR_TITLE }}
      #     SLACK_FOOTER: 'GitHub Actions | ${{ github.repository }}'
      #     MSG_MINIMAL: false
